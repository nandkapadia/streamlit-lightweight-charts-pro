---
description: Architecture patterns and design principles
---

# Architecture Patterns

## Overall Architecture

The project follows a clean architecture pattern with clear separation of concerns:

- **Python Backend**: Chart logic, data models, and Streamlit integration
- **React Frontend**: UI components and chart rendering
- **Component Bridge**: Streamlit component for Python-React communication

## Python Package Structure

### Core Components
- **Chart**: [streamlit_lightweight_charts_pro/charts/chart.py](mdc:streamlit_lightweight_charts_pro/charts/chart.py) - Main chart implementation
- **Series**: [streamlit_lightweight_charts_pro/charts/series/](mdc:streamlit_lightweight_charts_pro/charts/series/) - Chart series types
- **Options**: [streamlit_lightweight_charts_pro/charts/options/](mdc:streamlit_lightweight_charts_pro/charts/options/) - Configuration options
- **Data**: [streamlit_lightweight_charts_pro/data/](mdc:streamlit_lightweight_charts_pro/data/) - Data models and structures

### Design Patterns

#### Fluent API Pattern
```python
# Method chaining for intuitive API
chart = (Chart()
         .add_series(LineSeries(data))
         .update_options(height=400)
         .add_annotation(annotation))
```

#### Factory Pattern
```python
# Series factory for creating series from data
series = SeriesFactory.create_line_series(data, options)
```

#### Strategy Pattern
```python
# Different rendering strategies for different chart types
renderer = ChartRendererFactory.get_renderer(chart_type)
```

## Frontend Architecture

### Component Structure
- **Components**: [streamlit_lightweight_charts_pro/frontend/src/components/](mdc:streamlit_lightweight_charts_pro/frontend/src/components/) - React components
- **Services**: [streamlit_lightweight_charts_pro/frontend/src/services/](mdc:streamlit_lightweight_charts_pro/frontend/src/services/) - Business logic
- **Managers**: [streamlit_lightweight_charts_pro/frontend/src/managers/](mdc:streamlit_lightweight_charts_pro/frontend/src/managers/) - State management
- **Utils**: [streamlit_lightweight_charts_pro/frontend/src/utils/](mdc:streamlit_lightweight_charts_pro/frontend/src/utils/) - Utility functions

### Design Patterns

#### Component Composition
```typescript
// Composable chart components
<ChartContainer>
  <ChartSeriesManager />
  <ChartTradeManager />
  <RangeSwitcherPrimitive />
</ChartContainer>
```

#### Service Layer
```typescript
// Services handle business logic
const chartService = new ChartService()
const annotationService = new AnnotationService()
```

#### Manager Pattern
```typescript
// Managers handle state and coordination
const chartManager = new ChartManager()
const seriesManager = new SeriesManager()
```

## Data Flow

1. **Python**: User creates chart with data and options
2. **Serialization**: Chart configuration serialized to JSON
3. **Component**: Streamlit component passes data to React
4. **Rendering**: React renders chart using lightweight-charts library
5. **Events**: User interactions sent back to Python via component events

## Error Handling

- **Python**: Comprehensive error handling with logging
- **Frontend**: Error boundaries for React components
- **Validation**: Input validation at both Python and TypeScript levels

## Performance Optimizations

- **Lazy Loading**: Components loaded on demand
- **Memoization**: React.memo and useMemo for expensive operations
- **Data Virtualization**: Efficient handling of large datasets
- **Caching**: Caching for expensive computations
