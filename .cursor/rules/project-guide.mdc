---
alwaysApply: true
description: Comprehensive project guide with overview, quick reference, and development workflow
---

# Streamlit Lightweight Charts Pro - Project Guide

Professional-grade financial charting library for Streamlit that wraps TradingView's lightweight-charts with a fluent Python API.

## üìç Current Context
- **Project**: Streamlit Lightweight Charts Pro (v0.1.2)
- **Purpose**: Financial charting library with TradingView's lightweight-charts
- **Architecture**: Python backend + React/TypeScript frontend

## üèóÔ∏è Project Structure

### Core Python Package
- **Main Entry**: [streamlit_lightweight_charts_pro/__init__.py](mdc:streamlit_lightweight_charts_pro/__init__.py) - Public API exports
- **Chart Core**: [streamlit_lightweight_charts_pro/charts/chart.py](mdc:streamlit_lightweight_charts_pro/charts/chart.py) - Main Chart class with fluent API
- **Component Bridge**: [streamlit_lightweight_charts_pro/component.py](mdc:streamlit_lightweight_charts_pro/component.py) - Streamlit component integration

### Chart Components
- **Series Types**: [streamlit_lightweight_charts_pro/charts/series/](mdc:streamlit_lightweight_charts_pro/charts/series/)
  - `LineSeries`, `CandlestickSeries`, `AreaSeries`, `BarSeries`, `HistogramSeries`, `BaselineSeries`
  - Special: `SignalSeries`, `TrendFillSeries`, `RibbonSeries`, `BandSeries`
- **Data Models**: [streamlit_lightweight_charts_pro/data/](mdc:streamlit_lightweight_charts_pro/data/)
  - `SingleValueData`, `OhlcData`, `OhlcvData`, `TradeData`, `Annotation`
- **Options**: [streamlit_lightweight_charts_pro/charts/options/](mdc:streamlit_lightweight_charts_pro/charts/options/)
  - `ChartOptions`, `LayoutOptions`, `PriceScaleOptions`, `TimeScaleOptions`

### Frontend (React/TypeScript)
- **Entry Point**: [streamlit_lightweight_charts_pro/frontend/src/index.tsx](mdc:streamlit_lightweight_charts_pro/frontend/src/index.tsx)
- **Main Component**: [streamlit_lightweight_charts_pro/frontend/src/LightweightCharts.tsx](mdc:streamlit_lightweight_charts_pro/frontend/src/LightweightCharts.tsx)
- **Services**: [streamlit_lightweight_charts_pro/frontend/src/services/](mdc:streamlit_lightweight_charts_pro/frontend/src/services/)
- **Build Config**: [streamlit_lightweight_charts_pro/frontend/vite.config.ts](mdc:streamlit_lightweight_charts_pro/frontend/vite.config.ts)

### Testing & Examples
- **Unit Tests**: [tests/unit/](mdc:tests/unit/) - Fast, isolated component tests
- **Integration**: [tests/integration/](mdc:tests/integration/) - Component interaction tests
- **Examples**: [examples/](mdc:examples/) - Organized by feature complexity
- **Test Config**: [tests/conftest.py](mdc:tests/conftest.py) - Shared fixtures and utilities

## üéØ Key Design Principles

1. **Fluent API First**: Every method returns self for chaining
2. **Type Safety**: Full type hints with runtime validation
3. **Performance**: Lazy loading, caching, efficient serialization
4. **Developer Experience**: Clear errors, comprehensive logging, intuitive API

## ‚ö° Quick Reference

### Most Used Commands
```bash
# Development
make test              # Run all tests
make test-parallel     # Fast parallel testing
make format            # Auto-format code
make lint             # Check code quality

# Pre-commit
make pre-commit-setup  # Initial setup
make pre-commit-run    # Manual check

# Frontend
cd streamlit_lightweight_charts_pro/frontend
npm run dev           # Development server
npm run build         # Production build
```

### Key Entry Points
| Component | File | Purpose |
|-----------|------|---------|
| **Main API** | [__init__.py](mdc:streamlit_lightweight_charts_pro/__init__.py) | Public exports |
| **Chart Core** | [chart.py](mdc:streamlit_lightweight_charts_pro/charts/chart.py) | Chart class |
| **Frontend** | [LightweightCharts.tsx](mdc:streamlit_lightweight_charts_pro/frontend/src/LightweightCharts.tsx) | React component |
| **Tests** | [conftest.py](mdc:tests/conftest.py) | Test fixtures |
| **Examples** | [examples/](mdc:examples/) | Usage examples |

### Common Code Patterns

#### Creating a Chart (Python)
```python
from streamlit_lightweight_charts_pro import Chart, LineSeries
from streamlit_lightweight_charts_pro.data import SingleValueData

# Quick chart
data = [SingleValueData("2024-01-01", 100)]
chart = Chart(series=LineSeries(data))
chart.render(key="chart1")

# With chaining
chart = (Chart()
    .add_series(LineSeries(data, color="#ff0000"))
    .update_options(height=400)
    .render(key="chart2"))
```

#### Adding to Streamlit App
```python
import streamlit as st
import pandas as pd

# From DataFrame
df = pd.read_csv('data.csv')
chart = Chart(series=CandlestickSeries.from_dataframe(df))
chart.render(key="stock_chart")

# With columns
col1, col2 = st.columns(2)
with col1:
    chart1.render(key="left_chart")
with col2:
    chart2.render(key="right_chart")
```

### Quick Debugging
```python
# Enable logging
from streamlit_lightweight_charts_pro.logging_config import setup_logging
setup_logging(level="DEBUG")

# Validate data
if not data:
    st.error("No data provided")

# Check unique keys
chart.render(key=f"chart_{uuid.uuid4()}")  # Always unique
```

### Where to Find Things
- **Series Types**: `streamlit_lightweight_charts_pro/charts/series/`
- **Data Models**: `streamlit_lightweight_charts_pro/data/`
- **Chart Options**: `streamlit_lightweight_charts_pro/charts/options/`
- **React Components**: `streamlit_lightweight_charts_pro/frontend/src/components/`
- **Test Examples**: `tests/unit/test_*.py`

### Important Links
- [README.md](mdc:README.md) - Project documentation
- [pyproject.toml](mdc:pyproject.toml) - Python configuration
- [package.json](mdc:streamlit_lightweight_charts_pro/frontend/package.json) - Frontend deps
- [Makefile](mdc:Makefile) - All available commands

### Common Gotchas
1. **Unique Keys**: Every chart needs a unique `key` parameter
2. **Data Format**: Use data classes, not raw dicts/lists
3. **Frontend Build**: Run `npm run build` after frontend changes
4. **Method Chaining**: Methods must return `self`
5. **Test Coverage**: Keep above 95%

## üîß Development Setup

### Installation
```bash
# Install development environment
pip install -e ".[dev]"
make pre-commit-setup
```

### Pre-commit Setup
The project uses a comprehensive pre-commit configuration for code quality:
- **Installation**: `make pre-commit-setup` or `bash scripts/setup-precommit.sh`
- **Configuration**: [.pre-commit-config.yaml](mdc:.pre-commit-config.yaml)
- **Tools**: Ruff (linting/formatting), MyPy (type checking), Bandit (security), pytest (testing)

### Code Quality Tools
- **Ruff**: Fast Python linter and formatter (replaces Black, isort, autoflake, pylint)
- **MyPy**: Static type checking
- **Bandit**: Security vulnerability scanning
- **Pytest**: Testing framework with 95%+ coverage requirement
- **Google Docstrings**: All docstrings must follow Google style format with comprehensive inline comments

### Build Process
- **Frontend**: Built with Vite, configuration in [vite.config.ts](mdc:streamlit_lightweight_charts_pro/frontend/vite.config.ts)
- **Python Package**: Built with setuptools, configuration in [pyproject.toml](mdc:pyproject.toml)
- **Development**: Hot reloading for frontend development

## üõ†Ô∏è Available Commands

### Makefile Commands
- `make help` - Show all available commands
- `make install-dev` - Install development dependencies
- `make test` - Run all tests
- `make test-cov` - Run tests with coverage
- `make format` - Format code with Black and isort
- `make lint` - Run linting tools
- `make pre-commit-setup` - Setup pre-commit hooks
- `make pre-commit-run` - Run pre-commit checks

### Frontend Commands
- `make test-frontend` - Run frontend tests
- `make format-frontend` - Format frontend code
- `make lint-frontend` - Lint frontend code

### Test Commands
- **All Tests**: `make test` or `pytest tests/`
- **With Coverage**: `make test-cov` or `pytest --cov`
- **Parallel**: `make test-parallel` or `pytest -n auto`
- **Specific Category**: `pytest tests/unit/` or `pytest -m unit`

## üîÑ Development Workflow

### Basic Workflow
1. **Make changes** to Python or TypeScript files
2. **Run tests**: `make test-parallel`
3. **Format code**: `make format`
4. **Commit**: Git hooks run automatically
5. **Push**: Additional checks run on push

### Git Workflow
- **Branches**: Use feature branches for development
- **Commits**: Use conventional commit messages (enforced by commitizen)
- **Pre-commit**: All commits run quality checks automatically
- **Pre-push**: Comprehensive checks including security and coverage

### Development Environment
- **Python**: 3.7+ (configured in [pyproject.toml](mdc:pyproject.toml))
- **Node.js**: Required for frontend development
- **Dependencies**: Install with `pip install -e ".[dev]"`

## üìã Code Review Process

### Quality Checks
- **Quality Checks**: All code must pass pre-commit hooks
- **Test Coverage**: Maintain 95%+ test coverage
- **Type Safety**: All code must pass MyPy type checking
- **Security**: All code must pass Bandit security scanning
- **Documentation**: All functions, classes, and modules must have Google-style docstrings
- **Inline Comments**: Complex logic must have step-by-step explanatory comments
- **Line Length**: All code must be <= 100 characters per line
- **Import Organization**: Imports must be organized with proper section comments

## üì¶ Version & Dependencies

- **Python**: 3.7+ required (3.11 recommended)
- **Streamlit**: 1.0+ required
- **Node.js**: 16+ for frontend development
- **Current Version**: 0.1.2

---

**Status**: ‚úÖ **COMPLETE** - Comprehensive project guide with overview, quick reference, and development workflow
**Last Updated**: December 2024
**Next Review**: Quarterly review of project documentation
