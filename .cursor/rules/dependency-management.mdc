---
description: Dependency management for Python and Node.js with pinning, security scanning, and updates
---

# Dependency Management

## üéØ Dependency Management Strategy

The project uses **pinned dependencies** with regular security scanning and controlled updates to ensure stability and security.

## üêç Python Dependencies

### **1. Dependency Files Structure**
Organize dependencies across multiple files:

```toml
# pyproject.toml - Main project configuration
[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "streamlit-lightweight-charts-pro"
version = "0.1.2"
description = "Professional-grade financial charting library for Streamlit"
dependencies = [
    "streamlit>=1.0.0",
    "pandas>=1.3.0",
    "numpy>=1.21.0",
    "pydantic>=1.8.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0.0",
    "pytest-cov>=2.12.0",
    "pytest-xdist>=2.4.0",
    "ruff>=0.1.0",
    "mypy>=0.910",
    "bandit>=1.7.0",
    "pre-commit>=2.15.0",
]
test = [
    "pytest>=6.0.0",
    "pytest-cov>=2.12.0",
    "pytest-xdist>=2.4.0",
    "pytest-mock>=3.6.0",
]
docs = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=8.0.0",
    "mkdocstrings>=0.18.0",
    "mkdocstrings-python>=0.7.0",
]
```

```txt
# requirements.txt - Production dependencies (pinned)
streamlit==1.28.0
pandas==2.0.3
numpy==1.24.3
pydantic==1.10.7
lightweight-charts==5.0.8
```

```txt
# requirements-dev.txt - Development dependencies (pinned)
pytest==7.4.0
pytest-cov==4.1.0
pytest-xdist==3.3.1
pytest-mock==3.11.1
ruff==0.1.0
mypy==1.5.1
bandit==1.7.5
pre-commit==3.3.3
black==23.7.0
isort==5.12.0
```

```txt
# requirements-test.txt - Testing dependencies (pinned)
pytest==7.4.0
pytest-cov==4.1.0
pytest-xdist==3.3.1
pytest-mock==3.11.1
pytest-asyncio==0.21.1
coverage==7.2.7
```

### **2. Dependency Pinning Strategy**
Use specific version pinning for production:

```toml
# ‚úÖ CORRECT: Specific version pinning
[project]
dependencies = [
    "streamlit==1.28.0",  # Exact version for production
    "pandas>=2.0.0,<3.0.0",  # Compatible range for development
    "numpy>=1.24.0,<2.0.0",  # Compatible range
    "pydantic>=1.10.0,<2.0.0",  # Compatible range
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0,<8.0.0",  # Compatible range for dev tools
    "ruff>=0.1.0,<1.0.0",
    "mypy>=1.5.0,<2.0.0",
]
```

### **3. Security Scanning**
Implement security scanning in CI/CD:

```yaml
# .github/workflows/security.yml
name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly security scan

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Run safety check
        run: |
          safety check --json --output safety-report.json
          safety check --short-report

      - name: Run bandit security scan
        run: |
          bandit -r streamlit_lightweight_charts_pro/ -f json -o bandit-report.json
          bandit -r streamlit_lightweight_charts_pro/ -ll

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            safety-report.json
            bandit-report.json
```

### **4. Dependency Update Process**
Automate dependency updates with security checks:

```python
# scripts/update-dependencies.py
#!/usr/bin/env python3
"""Script to update dependencies with security checks."""

import subprocess
import sys
from pathlib import Path
from typing import List, Dict, Any
import json

def run_command(cmd: List[str]) -> subprocess.CompletedProcess:
    """Run command and return result."""
    return subprocess.run(cmd, capture_output=True, text=True)

def check_security() -> bool:
    """Check for security vulnerabilities."""
    print("üîç Checking for security vulnerabilities...")

    # Run safety check
    result = run_command(["safety", "check", "--json"])
    if result.returncode != 0:
        print("‚ùå Security vulnerabilities found:")
        try:
            vulnerabilities = json.loads(result.stdout)
            for vuln in vulnerabilities:
                print(f"  - {vuln['package']}: {vuln['vulnerability']}")
        except json.JSONDecodeError:
            print(result.stdout)
        return False

    print("‚úÖ No security vulnerabilities found")
    return True

def update_dependencies() -> bool:
    """Update dependencies safely."""
    print("üì¶ Updating dependencies...")

    # Update pip
    run_command([sys.executable, "-m", "pip", "install", "--upgrade", "pip"])

    # Update dependencies
    result = run_command([sys.executable, "-m", "pip", "install", "--upgrade", "-r", "requirements.txt"])
    if result.returncode != 0:
        print(f"‚ùå Failed to update dependencies: {result.stderr}")
        return False

    print("‚úÖ Dependencies updated successfully")
    return True

def main():
    """Main update process."""
    print("üöÄ Starting dependency update process...")

    # Check security before update
    if not check_security():
        print("‚ùå Security check failed. Aborting update.")
        sys.exit(1)

    # Update dependencies
    if not update_dependencies():
        print("‚ùå Dependency update failed.")
        sys.exit(1)

    # Check security after update
    if not check_security():
        print("‚ùå Security check failed after update. Please review changes.")
        sys.exit(1)

    print("‚úÖ Dependency update completed successfully")

if __name__ == "__main__":
    main()
```

## üì¶ Node.js Dependencies

### **1. Package.json Structure**
Organize dependencies in package.json:

```json
{
  "name": "streamlit-lightweight-charts-pro",
  "version": "0.1.2",
  "private": false,
  "license": "MIT",
  "dependencies": {
    "@types/react": "^19.0.0",
    "@types/react-dom": "^19.0.0",
    "jsdom": "^27.0.0",
    "lightweight-charts": "^5.0.8",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "streamlit-component-lib": "^2.0.0",
    "streamlit-component-lib-react-hooks": "^1.2.8"
  },
  "devDependencies": {
    "@eslint/js": "^9.36.0",
    "@pmmmwh/react-refresh-webpack-plugin": "^0.6.1",
    "@testing-library/jest-dom": "^6.8.0",
    "@testing-library/react": "^14.3.1",
    "@testing-library/user-event": "^14.6.1",
    "@types/chai": "^5.2.2",
    "@types/node": "^24.5.2",
    "@types/scheduler": "^0.26.0",
    "@typescript-eslint/eslint-plugin": "^8.44.1",
    "@vitejs/plugin-react": "^5.0.3",
    "@vitest/coverage-v8": "^3.2.4",
    "@vitest/ui": "^3.2.4",
    "chai": "^6.0.1",
    "compression-webpack-plugin": "^11.1.0",
    "eslint": "^9.36.0",
    "eslint-plugin-react": "^7.37.5",
    "eslint-plugin-react-hooks": "^5.2.0",
    "prettier": "^3.6.2",
    "terser-webpack-plugin": "^5.3.7",
    "typescript": "^5.9.2",
    "typescript-eslint": "^8.44.1",
    "vite": "^7.1.7",
    "vite-bundle-analyzer": "^1.2.3",
    "vitest": "^3.2.4",
    "webpack-bundle-analyzer": "^4.9.0"
  },
  "resolutions": {
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "typescript": "^5.9.2"
  },
  "overrides": {
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "typescript": "^5.9.2"
  }
}
```

### **2. Security Scanning for Node.js**
Implement npm security scanning:

```yaml
# .github/workflows/frontend-security.yml
name: Frontend Security Scan

on:
  push:
    branches: [ main, develop ]
    paths: [ 'streamlit_lightweight_charts_pro/frontend/**' ]
  pull_request:
    branches: [ main, develop ]
    paths: [ 'streamlit_lightweight_charts_pro/frontend/**' ]

jobs:
  frontend-security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: streamlit_lightweight_charts_pro/frontend/package-lock.json

      - name: Install dependencies
        working-directory: streamlit_lightweight_charts_pro/frontend
        run: npm ci

      - name: Run npm audit
        working-directory: streamlit_lightweight_charts_pro/frontend
        run: |
          npm audit --audit-level=moderate --json > npm-audit-report.json
          npm audit --audit-level=moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        working-directory: streamlit_lightweight_charts_pro/frontend

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: frontend-security-reports
          path: streamlit_lightweight_charts_pro/frontend/npm-audit-report.json
```

### **3. Dependency Update Automation**
Automate Node.js dependency updates:

```json
{
  "scripts": {
    "update-deps": "npm update",
    "update-deps-audit": "npm update && npm audit --audit-level=moderate",
    "check-security": "npm audit --audit-level=moderate",
    "fix-security": "npm audit fix --audit-level=moderate"
  }
}
```

```javascript
// scripts/update-frontend-deps.js
const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

function runCommand(command, cwd = process.cwd()) {
  console.log(`Running: ${command}`);
  try {
    execSync(command, { cwd, stdio: 'inherit' });
    return true;
  } catch (error) {
    console.error(`Command failed: ${command}`);
    return false;
  }
}

function checkSecurity() {
  console.log('üîç Checking for security vulnerabilities...');
  return runCommand('npm audit --audit-level=moderate');
}

function updateDependencies() {
  console.log('üì¶ Updating dependencies...');
  return runCommand('npm update');
}

function main() {
  const frontendDir = path.join(__dirname, '..', 'streamlit_lightweight_charts_pro', 'frontend');

  console.log('üöÄ Starting frontend dependency update process...');

  // Check security before update
  if (!checkSecurity()) {
    console.log('‚ùå Security check failed. Aborting update.');
    process.exit(1);
  }

  // Update dependencies
  if (!updateDependencies()) {
    console.log('‚ùå Dependency update failed.');
    process.exit(1);
  }

  // Check security after update
  if (!checkSecurity()) {
    console.log('‚ùå Security check failed after update. Please review changes.');
    process.exit(1);
  }

  console.log('‚úÖ Frontend dependency update completed successfully');
}

if (require.main === module) {
  main();
}
```

## üîÑ Dependency Update Workflow

### **1. Automated Updates**
Use Dependabot for automated updates:

```yaml
# .github/dependabot.yml
version: 2
updates:
  # Python dependencies
  - package-ecosystem: "pip"
    directory: "/"
    schedule:
      interval: "weekly"
      day: "monday"
      time: "09:00"
    open-pull-requests-limit: 10
    reviewers:
      - "team-backend"
    assignees:
      - "team-backend"
    commit-message:
      prefix: "deps"
      include: "scope"

  # Node.js dependencies
  - package-ecosystem: "npm"
    directory: "/streamlit_lightweight_charts_pro/frontend"
    schedule:
      interval: "weekly"
      day: "monday"
      time: "09:00"
    open-pull-requests-limit: 10
    reviewers:
      - "team-frontend"
    assignees:
      - "team-frontend"
    commit-message:
      prefix: "deps"
      include: "scope"

  # GitHub Actions
  - package-ecosystem: "github-actions"
    directory: "/"
    schedule:
      interval: "weekly"
      day: "monday"
      time: "09:00"
    open-pull-requests-limit: 5
```

### **2. Manual Update Process**
Document manual update process:

```markdown
# Dependency Update Process

## 1. Pre-Update Checklist
- [ ] Check current security status
- [ ] Review changelog for breaking changes
- [ ] Ensure tests are passing
- [ ] Create backup branch

## 2. Update Process
1. **Python Dependencies**
   ```bash
   # Update production dependencies
   pip install --upgrade -r requirements.txt

   # Update development dependencies
   pip install --upgrade -r requirements-dev.txt

   # Run security check
   safety check
   bandit -r streamlit_lightweight_charts_pro/
   ```

2. **Node.js Dependencies**
   ```bash
   cd streamlit_lightweight_charts_pro/frontend

   # Update dependencies
   npm update

   # Run security check
   npm audit --audit-level=moderate
   ```

## 3. Post-Update Checklist
- [ ] Run full test suite
- [ ] Check for breaking changes
- [ ] Update documentation if needed
- [ ] Commit changes with clear message
- [ ] Create pull request for review
```

## üö´ Anti-Patterns to Avoid

### **‚ùå Wrong: Unpinned Dependencies**
```toml
# Don't use unpinned dependencies in production
[project]
dependencies = [
    "streamlit",  # Wrong: no version specified
    "pandas",     # Wrong: no version specified
    "numpy",      # Wrong: no version specified
]
```

### **‚ùå Wrong: Ignoring Security Vulnerabilities**
```bash
# Don't ignore security vulnerabilities
npm audit --audit-level=high  # Wrong: ignoring moderate vulnerabilities
```

### **‚ùå Wrong: Updating All Dependencies at Once**
```bash
# Don't update all dependencies without testing
pip install --upgrade pip setuptools wheel  # Wrong: updating build tools
npm update  # Wrong: updating all dependencies at once
```

## ‚úÖ Best Practices

### **1. Dependency Pinning Strategy**
Use appropriate pinning for different environments:

```toml
# ‚úÖ CORRECT: Appropriate pinning strategy
[project]
dependencies = [
    "streamlit==1.28.0",  # Exact pin for production
    "pandas>=2.0.0,<3.0.0",  # Compatible range for development
    "numpy>=1.24.0,<2.0.0",  # Compatible range
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0,<8.0.0",  # Compatible range for dev tools
    "ruff>=0.1.0,<1.0.0",    # Compatible range
]
```

### **2. Security-First Updates**
Prioritize security updates:

```python
# ‚úÖ CORRECT: Security-first update process
def update_dependencies_security_first():
    """Update dependencies with security priority."""

    # 1. Check for security vulnerabilities
    if not check_security():
        print("‚ùå Security vulnerabilities found. Fixing first...")
        fix_security_vulnerabilities()

    # 2. Update security-related dependencies
    update_security_dependencies()

    # 3. Update other dependencies
    update_other_dependencies()

    # 4. Verify security after update
    if not check_security():
        print("‚ùå Security check failed after update.")
        rollback_changes()
```

### **3. Dependency Monitoring**
Monitor dependencies for issues:

```python
# ‚úÖ CORRECT: Dependency monitoring
import requests
import json
from datetime import datetime
from typing import Dict, List, Any

class DependencyMonitor:
    """Monitor dependencies for security issues and updates."""

    def __init__(self):
        self.vulnerability_sources = [
            "https://pypi.org/pypi/{package}/json",
            "https://registry.npmjs.org/{package}"
        ]

    def check_package_vulnerabilities(self, package: str, version: str) -> List[Dict[str, Any]]:
        """Check for known vulnerabilities in a package."""
        vulnerabilities = []

        # Check PyPI for Python packages
        if self.is_python_package(package):
            vulnerabilities.extend(self.check_pypi_vulnerabilities(package, version))

        # Check npm for Node.js packages
        if self.is_node_package(package):
            vulnerabilities.extend(self.check_npm_vulnerabilities(package, version))

        return vulnerabilities

    def monitor_dependencies(self, dependencies: List[Dict[str, str]]) -> Dict[str, Any]:
        """Monitor all dependencies for issues."""
        results = {
            "timestamp": datetime.now().isoformat(),
            "packages": {},
            "summary": {
                "total": len(dependencies),
                "vulnerable": 0,
                "outdated": 0
            }
        }

        for dep in dependencies:
            package = dep["name"]
            version = dep["version"]

            vulnerabilities = self.check_package_vulnerabilities(package, version)
            latest_version = self.get_latest_version(package)

            results["packages"][package] = {
                "current_version": version,
                "latest_version": latest_version,
                "vulnerabilities": vulnerabilities,
                "is_vulnerable": len(vulnerabilities) > 0,
                "is_outdated": version != latest_version
            }

            if vulnerabilities:
                results["summary"]["vulnerable"] += 1
            if version != latest_version:
                results["summary"]["outdated"] += 1

        return results
```

## üìã Dependency Management Checklist

- [ ] **Dependencies are pinned** for production
- [ ] **Security scanning** is automated
- [ ] **Update process** is documented
- [ ] **Breaking changes** are tracked
- [ ] **Dependency monitoring** is implemented
- [ ] **Automated updates** are configured
- [ ] **Manual update process** is documented
- [ ] **Security vulnerabilities** are prioritized
- [ ] **Dependency files** are organized
- [ ] **Version ranges** are appropriate
- [ ] **Build tools** are pinned
- [ ] **Development dependencies** are separate
- [ ] **Testing dependencies** are separate
- [ ] **Documentation dependencies** are separate
