---
description: Index of all Cursor rules and their scope
---

# Cursor Rules Index

This directory contains comprehensive rules and guidelines for the Streamlit Lightweight Charts Pro project. Each rule file is designed to help AI assistants understand project patterns, standards, and best practices.

## üìã Core Development Rules

### **Code Quality & Standards**
- **[code-quality-standards.mdc](mdc:.cursor/rules/code-quality-standards.mdc)** - Tooling and enforcement (pre-commit hooks, linting, security)
- **[python-coding-standards.mdc](mdc:.cursor/rules/python-coding-standards.mdc)** - Python patterns and architecture (fluent API, mixins, type hints, import organization)
- **[google-docstring-standards.mdc](mdc:.cursor/rules/google-docstring-standards.mdc)** - Comprehensive docstring standards, examples, and documentation patterns

### **Frontend Development**
- **[frontend-development.mdc](mdc:.cursor/rules/frontend-development.mdc)** - Comprehensive TypeScript/React guidelines, state management patterns, and project structure
- **[react-integration-patterns.mdc](mdc:.cursor/rules/react-integration-patterns.mdc)** - React integration patterns for Lightweight Charts (useLayoutEffect, forwardRef, helper hooks)
- **[pane-primitive-positioning.mdc](mdc:.cursor/rules/pane-primitive-positioning.mdc)** - Critical pattern for primitive positioning in multi-pane charts

### **Architecture & Patterns**
- **[architecture-patterns.mdc](mdc:.cursor/rules/architecture-patterns.mdc)** - Comprehensive architecture principles, design patterns, and chart API patterns
- **[api-design-versioning.mdc](mdc:.cursor/rules/api-design-versioning.mdc)** - API design and versioning patterns
- **[custom-series-development.mdc](mdc:.cursor/rules/custom-series-development.mdc)** - Comprehensive guide for creating custom series using TradingView's Series Primitives API

## üß™ Testing & Quality Assurance

- **[testing-standards.mdc](mdc:.cursor/rules/testing-standards.mdc)** - Testing organization, pytest, and Vitest guidelines
- **[performance-optimization.mdc](mdc:.cursor/rules/performance-optimization.mdc)** - Performance guidelines, memory profiling, and optimization techniques
- **[security-best-practices.mdc](mdc:.cursor/rules/security-best-practices.mdc)** - Security practices and vulnerability prevention
- **[error-handling-logging.mdc](mdc:.cursor/rules/error-handling-logging.mdc)** - Error handling, logging conventions, and debug guidelines

## üîß Development Workflow

- **[project-guide.mdc](mdc:.cursor/rules/project-guide.mdc)** - Comprehensive project guide with overview, quick reference, development workflow, and setup
- **[troubleshooting-guide.mdc](mdc:.cursor/rules/troubleshooting-guide.mdc)** - Common issues, solutions, debugging techniques, and frontend troubleshooting
- **[dependency-management.mdc](mdc:.cursor/rules/dependency-management.mdc)** - Dependency management for Python and Node.js
- **[cicd-release-practices.mdc](mdc:.cursor/rules/cicd-release-practices.mdc)** - CI/CD and release practices

## üöÄ Project Overview

- **[streamlit-integration.mdc](mdc:.cursor/rules/streamlit-integration.mdc)** - Streamlit integration patterns, performance optimization, and memory management

## üéØ Rule Categories

### **Always Applied Rules**
These rules are automatically applied to all relevant files:
- `code-quality-standards.mdc` - All code files
- `google-docstring-standards.mdc` - All Python files
- `project-guide.mdc` - Always available

### **File-Type Specific Rules**
- **Python files** (`*.py`): `python-coding-standards.mdc`, `google-docstring-standards.mdc`
- **Frontend files** (`*.ts`, `*.tsx`, `*.js`, `*.jsx`): `frontend-development.mdc`, `react-integration-patterns.mdc`
- **Test files** (`test_*.py`, `*_test.py`, `*.test.ts`, `*.test.tsx`): `testing-standards.mdc`

### **Context-Specific Rules**
- **Chart development**: `architecture-patterns.mdc`, `pane-primitive-positioning.mdc`
- **Architecture decisions**: `architecture-patterns.mdc`
- **Performance work**: `performance-optimization.mdc`
- **Security concerns**: `security-best-practices.mdc`

## üìñ How to Use These Rules

### **For AI Assistants**
1. **Always check** `project-guide.mdc` for context and quick reference
2. **Apply relevant rules** based on file type and task
3. **Follow patterns** from `architecture-patterns.mdc`
4. **Ensure quality** with `code-quality-standards.mdc`

### **For Developers**
1. **Read** `project-guide.mdc` for setup, commands, and workflow
2. **Follow** `python-coding-standards.mdc` for Python code
3. **Use** `frontend-development.mdc` for React/TypeScript work
4. **Check** `troubleshooting-guide.mdc` when encountering issues

### **For Code Reviews**
1. **Verify** compliance with `code-quality-standards.mdc`
2. **Check** docstring quality with `google-docstring-standards.mdc`
3. **Ensure** proper patterns from `architecture-patterns.mdc`
4. **Validate** security with `security-best-practices.mdc`

## üîÑ Rule Maintenance

### **Updating Rules**
- **Add new patterns** to appropriate existing files
- **Create new files** for distinct concerns
- **Update this index** when adding/removing rules
- **Keep examples current** with actual codebase

### **Rule Dependencies**
- **Core rules** (quality, standards) should be referenced by others
- **Specific rules** (frontend, testing) can reference core rules
- **Avoid circular dependencies** between rule files

## üìù Rule File Format

All rule files follow this structure:
```yaml
---
description: Brief description of rule scope
globs: "*.py,*.ts"  # Optional: file patterns
alwaysApply: true    # Optional: always apply this rule
---

# Rule Title

## Scope
Brief description of what this rule covers

## Content
Detailed guidelines, examples, and patterns
```

## üéØ Quick Navigation

| Need | Rule File |
|------|-----------|
| **Python coding** | `python-coding-standards.mdc` |
| **Frontend work** | `frontend-development.mdc` |
| **React integration** | `react-integration-patterns.mdc` |
| **Chart development** | `architecture-patterns.mdc` |
| **Custom series** | `custom-series-development.mdc` |
| **API design** | `api-design-versioning.mdc` |
| **Testing** | `testing-standards.mdc` |
| **Performance** | `performance-optimization.mdc` |
| **Security** | `security-best-practices.mdc` |
| **Error handling** | `error-handling-logging.mdc` |
| **Dependencies** | `dependency-management.mdc` |
| **CI/CD** | `cicd-release-practices.mdc` |
| **Troubleshooting** | `troubleshooting-guide.mdc` |
| **Project guide** | `project-guide.mdc` |

---

**Last Updated**: October 2024
**Total Rules**: 21 files
**Maintained by**: Streamlit Lightweight Charts Pro Contributors

## üìù Recent Changes

### **New Rules (October 2024)**
- **react-integration-patterns.mdc** ‚Üí React integration patterns with useLayoutEffect, forwardRef/useImperativeHandle, and helper hooks (Phase 1 implementation)

### **Major Consolidation (December 2024)**
- **project-overview.mdc**, **quick-reference.mdc**, **development-workflow.mdc** ‚Üí merged into **project-guide.mdc**
- **frontend-development.mdc**, **frontend-state-management.mdc** ‚Üí merged into **frontend-development.mdc**
- **architecture-patterns.mdc**, **chart-api-patterns.mdc** ‚Üí merged into **architecture-patterns.mdc**
- **examples-and-documentation.mdc** ‚Üí merged into **google-docstring-standards.mdc**
- **docstring-standards-summary.mdc** ‚Üí merged into **google-docstring-standards.mdc**
- **custom-series-creation.mdc** ‚Üí merged into **custom-series-development.mdc**

### **Enhanced Rules (December 2024)**
- **streamlit-integration.mdc** ‚Üí added performance optimization and memory management
- **troubleshooting-guide.mdc** ‚Üí added comprehensive frontend troubleshooting
- **performance-optimization.mdc** ‚Üí added memory profiling and optimization techniques
- **error-handling-logging.mdc** ‚Üí added debug guidelines and f-string warnings

### **New Rules (December 2024)**
- **custom-series-creation.mdc** ‚Üí comprehensive guide for creating custom series types with backend and frontend implementation
