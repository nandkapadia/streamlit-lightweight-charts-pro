---
description: Chart API design patterns and best practices
---

# Chart API Design Patterns

## ðŸŽ¯ Core API Principles

1. **Fluent Interface**: Every method returns self for chaining
2. **Immutable Defaults**: Default values never mutate
3. **Progressive Enhancement**: Start simple, add complexity as needed
4. **Type Safety**: Runtime validation matches type hints

## ðŸ”— Fluent API Examples

```python
# Simple: Direct instantiation
chart = Chart(series=LineSeries(data))
chart.render(key="simple")

# Intermediate: Method chaining
chart = (Chart()
    .add_series(LineSeries(data, color="#ff0000"))
    .update_options(height=400)
    .render(key="intermediate"))

# Advanced: Full fluent configuration
chart = (Chart()
    .add_series(
        LineSeries(data)
        .set_color("#ff0000")
        .set_line_width(2)
        .set_crosshair_marker_visible(True)
    )
    .add_series(
        AreaSeries(data2)
        .set_fill_color("rgba(0, 255, 0, 0.3)")
    )
    .update_options(
        height=500,
        layout=LayoutOptions(background_color="white"),
        time_scale=TimeScaleOptions(time_visible=True)
    )
    .add_annotation(
        create_text_annotation("2024-01-01", 100, "Start")
        .set_color("#0000ff")
        .set_font_size(14)
    )
    .add_trade(
        Trade(entry_time="2024-01-01", entry_price=100,
              exit_time="2024-01-05", exit_price=105)
    )
    .render(key="advanced"))
```

## Series Creation Patterns

- **Data Classes**: Use typed data classes from [streamlit_lightweight_charts_pro/data/](mdc:streamlit_lightweight_charts_pro/data/)
- **Series Types**: All series inherit from base [Series](mdc:streamlit_lightweight_charts_pro/charts/series/__init__.py) class
- **Method Chaining**: Series support fluent configuration

```python
# Line series with method chaining
line_series = (LineSeries(data)
               .set_color("#ff0000")
               .set_line_width(2)
               .set_crosshair_marker_visible(True))

# Candlestick series with styling
candlestick_series = (CandlestickSeries(ohlc_data)
                     .set_up_color("#4CAF50")
                     .set_down_color("#F44336")
                     .set_border_visible(False))
```

## Chart Configuration

- **Options**: Use typed option classes from [streamlit_lightweight_charts_pro/charts/options/](mdc:streamlit_lightweight_charts_pro/charts/options/)
- **Validation**: All options are validated with type hints
- **Defaults**: Sensible defaults for all configuration options

```python
# Chart options with validation
options = ChartOptions(
    height=500,
    width=800,
    layout=LayoutOptions(background_color="white"),
    grid=GridOptions(vert_lines_color="rgba(197, 203, 206, 0.5)")
)
```

## Data Integration Patterns

- **Pandas**: Seamless DataFrame integration with column mapping
- **CSV**: Direct CSV loading with custom column mapping
- **APIs**: Easy integration with financial data APIs

```python
# Pandas DataFrame integration
chart = Chart(series=CandlestickSeries.from_dataframe(
    df=df,
    column_mapping={
        'time': 'date',
        'open': 'open',
        'high': 'high',
        'low': 'low',
        'close': 'close'
    }
))
```

## Annotation System

- **Layers**: Use annotation layers for organization
- **Types**: Support for text, arrow, and shape annotations
- **Styling**: Comprehensive styling options for all annotation types

```python
# Annotation with layers
layer = AnnotationLayer("analysis", visible=True)
layer.add_annotation(create_text_annotation("2024-01-01", 100, "Support"))
chart.add_annotation_layer(layer)
```

## Error Handling

- **Validation**: Input validation with clear error messages
- **Type Safety**: Type hints prevent runtime errors
- **Logging**: Comprehensive logging for debugging
