---
alwaysApply: true
---

# 🚀 Quick Reference Guide

## 📍 Current Context
- **Project**: Streamlit Lightweight Charts Pro (v0.1.2)
- **Purpose**: Financial charting library with TradingView's lightweight-charts
- **Architecture**: Python backend + React/TypeScript frontend

## ⚡ Most Used Commands

```bash
# Development
make test              # Run all tests
make test-parallel     # Fast parallel testing
make format            # Auto-format code
make lint             # Check code quality

# Pre-commit
make pre-commit-setup  # Initial setup
make pre-commit-run    # Manual check

# Frontend
cd streamlit_lightweight_charts_pro/frontend
npm run dev           # Development server
npm run build         # Production build
```

## 🔑 Key Entry Points

| Component | File | Purpose |
|-----------|------|---------|
| **Main API** | [__init__.py](mdc:streamlit_lightweight_charts_pro/__init__.py) | Public exports |
| **Chart Core** | [chart.py](mdc:streamlit_lightweight_charts_pro/charts/chart.py) | Chart class |
| **Frontend** | [LightweightCharts.tsx](mdc:streamlit_lightweight_charts_pro/frontend/src/LightweightCharts.tsx) | React component |
| **Tests** | [conftest.py](mdc:tests/conftest.py) | Test fixtures |
| **Examples** | [examples/](mdc:examples/) | Usage examples |

## 💡 Common Code Patterns

### Creating a Chart (Python)
```python
from streamlit_lightweight_charts_pro import Chart, LineSeries
from streamlit_lightweight_charts_pro.data import SingleValueData

# Quick chart
data = [SingleValueData("2024-01-01", 100)]
chart = Chart(series=LineSeries(data))
chart.render(key="chart1")

# With chaining
chart = (Chart()
    .add_series(LineSeries(data, color="#ff0000"))
    .update_options(height=400)
    .render(key="chart2"))
```

### Adding to Streamlit App
```python
import streamlit as st
import pandas as pd

# From DataFrame
df = pd.read_csv('data.csv')
chart = Chart(series=CandlestickSeries.from_dataframe(df))
chart.render(key="stock_chart")

# With columns
col1, col2 = st.columns(2)
with col1:
    chart1.render(key="left_chart")
with col2:
    chart2.render(key="right_chart")
```

## 🛠️ Development Workflow

1. **Make changes** to Python or TypeScript files
2. **Run tests**: `make test-parallel`
3. **Format code**: `make format`
4. **Commit**: Git hooks run automatically
5. **Push**: Additional checks run on push

## 🐛 Quick Debugging

```python
# Enable logging
from streamlit_lightweight_charts_pro.logging_config import setup_logging
setup_logging(level="DEBUG")

# Validate data
if not data:
    st.error("No data provided")

# Check unique keys
chart.render(key=f"chart_{uuid.uuid4()}")  # Always unique
```

## 📂 Where to Find Things

- **Series Types**: `streamlit_lightweight_charts_pro/charts/series/`
- **Data Models**: `streamlit_lightweight_charts_pro/data/`
- **Chart Options**: `streamlit_lightweight_charts_pro/charts/options/`
- **React Components**: `streamlit_lightweight_charts_pro/frontend/src/components/`
- **Test Examples**: `tests/unit/test_*.py`

## 🔗 Important Links

- [README.md](mdc:README.md) - Project documentation
- [pyproject.toml](mdc:pyproject.toml) - Python configuration
- [package.json](mdc:streamlit_lightweight_charts_pro/frontend/package.json) - Frontend deps
- [Makefile](mdc:Makefile) - All available commands

## ⚠️ Common Gotchas

1. **Unique Keys**: Every chart needs a unique `key` parameter
2. **Data Format**: Use data classes, not raw dicts/lists
3. **Frontend Build**: Run `npm run build` after frontend changes
4. **Method Chaining**: Methods must return `self`
5. **Test Coverage**: Keep above 95%
