# BasePanePrimitive Pane Positioning Pattern

## Critical Pattern for Primitive Positioning

**IMPORTANT:** This pattern is essential for proper positioning of primitives in multi-pane charts. All primitives extending `BasePanePrimitive` must follow this pattern.

## Architecture Overview

BasePanePrimitive uses a conditional positioning system based on the `isPanePrimitive` flag and `getPaneId()` method to determine where primitives are positioned:

- **Chart-level primitives** (pane 0): Always positioned on the main chart container
- **Pane-specific primitives**: Positioned on their designated pane

## Implementation Patterns

### 1. Chart-Level Primitives (e.g., RangeSwitcherPrimitive)

**Use Case:** Controls that affect the entire chart (time ranges, global settings)

```typescript
// RangeSwitcherPrimitive.ts
protected getPaneId(): number {
  return 0; // Always chart-level (pane 0)
}
```

**Configuration:**
- No `isPanePrimitive` flag needed
- Always returns pane 0
- Positions on main chart container

### 2. Pane-Specific Primitives (e.g., LegendPrimitive, ButtonPanelPrimitive)

**Use Case:** Controls specific to individual panes (legends, pane controls, indicators)

```typescript
// Configuration Interface
export interface PaneSpecificPrimitiveConfig extends BasePrimitiveConfig {
  /** Whether this is a pane-specific primitive (vs chart-level) */
  isPanePrimitive?: boolean;
  /** Pane ID this primitive belongs to */
  paneId: number;
}

// getPaneId() Implementation
protected getPaneId(): number {
  if (this.config.isPanePrimitive && this.config.paneId !== undefined) {
    return this.config.paneId; // Use specific pane ID
  }
  return 0; // Default to chart-level (pane 0)
}
```

**Configuration:**
- Must include `isPanePrimitive?: boolean` in config interface
- Must include `paneId: number` in config interface
- Factory functions should set `isPanePrimitive: true` for pane-specific primitives

## Factory Function Pattern

```typescript
export function createPaneSpecificPrimitive(
  paneId: number,
  config: Partial<PaneSpecificPrimitiveConfig> = {}
): PaneSpecificPrimitive {
  const fullConfig: PaneSpecificPrimitiveConfig = {
    corner: 'top-right',
    priority: PrimitivePriority.DEFAULT,
    isPanePrimitive: true, // CRITICAL: Must be true for pane-specific positioning
    paneId,
    ...config,
  };

  return new PaneSpecificPrimitive(id, fullConfig);
}
```

## Common Mistakes

### ❌ Wrong: Direct paneId return without conditional logic
```typescript
// This breaks the positioning system
protected getPaneId(): number {
  return this.config.paneId; // Missing isPanePrimitive check
}
```

### ❌ Wrong: Missing isPanePrimitive flag in factory
```typescript
// This causes all primitives to default to pane 0
const fullConfig = {
  paneId, // Without isPanePrimitive: true, will always go to pane 0
  ...config,
};
```

### ✅ Correct: Conditional logic with isPanePrimitive flag
```typescript
// Follows the established pattern
protected getPaneId(): number {
  if (this.config.isPanePrimitive && this.config.paneId !== undefined) {
    return this.config.paneId; // Use specific pane ID
  }
  return 0; // Default to chart-level (pane 0)
}

// And in factory:
const fullConfig = {
  isPanePrimitive: true, // CRITICAL for pane-specific positioning
  paneId,
  ...config,
};
```

## Debugging Positioning Issues

If primitives appear on wrong panes:

1. **Check `isPanePrimitive` flag:** Ensure it's set to `true` in factory function
2. **Verify `getPaneId()` logic:** Must follow conditional pattern, not direct return
3. **Validate config interface:** Must include both `isPanePrimitive?` and `paneId` properties
4. **Check ChartPrimitiveManager:** Ensure proper attachment to correct panes

## Examples

### Chart-Level (RangeSwitcher)
- Always appears on main chart
- Controls global chart behavior
- Single instance per chart

### Pane-Specific (ButtonPanel, Legend)
- Appears on designated pane
- Controls pane-specific behavior
- Multiple instances (one per pane)

## Reference Implementations

- **Chart-Level:** `RangeSwitcherPrimitive.ts:589-591`
- **Pane-Specific:** `LegendPrimitive.ts:294-299`
- **Updated Pattern:** `ButtonPanelPrimitive.ts:281-286`

---

**Rule:** Always follow the LegendPrimitive pattern for pane-specific positioning, never create custom `initializeLayoutManager()` overrides.
