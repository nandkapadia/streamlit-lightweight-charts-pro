---
description: Security best practices and vulnerability prevention
---

# Security Best Practices

## üîí Input Validation & Sanitization

### Data Validation

```python
from typing import List, Optional
import re

class SecurityValidator:
    """Security-focused input validation."""

    @staticmethod
    def validate_chart_key(key: str) -> str:
        """Validate and sanitize chart key."""
        # Only allow alphanumeric, underscore, and dash
        if not re.match(r'^[a-zA-Z0-9_-]+$', key):
            raise ValueError(f"Invalid chart key: {key}. Use only alphanumeric, _, -")

        # Limit length to prevent DoS
        if len(key) > 100:
            raise ValueError(f"Chart key too long: {len(key)} > 100")

        return key

    @staticmethod
    def sanitize_label(label: str) -> str:
        """Sanitize user-provided labels to prevent XSS."""
        # Remove any HTML/script tags
        label = re.sub(r'<[^>]*>', '', label)

        # Escape special characters
        label = label.replace('&', '&amp;')
        label = label.replace('<', '&lt;')
        label = label.replace('>', '&gt;')
        label = label.replace('"', '&quot;')
        label = label.replace("'", '&#39;')

        # Limit length
        return label[:200]

    @staticmethod
    def validate_color(color: str) -> str:
        """Validate color input to prevent injection."""
        # Allow hex colors
        if re.match(r'^#[0-9A-Fa-f]{6}$', color):
            return color

        # Allow rgba colors
        if re.match(r'^rgba?\(\d{1,3},\s*\d{1,3},\s*\d{1,3}(,\s*[0-9.]+)?\)$', color):
            return color

        raise ValueError(f"Invalid color format: {color}")
```

### File Upload Security

```python
import os
import hashlib
from pathlib import Path

ALLOWED_EXTENSIONS = {'.csv', '.json', '.txt'}
MAX_FILE_SIZE = 10 * 1024 * 1024  # 10MB

def secure_file_upload(uploaded_file) -> pd.DataFrame:
    """Securely process uploaded files."""

    # Check file size
    if uploaded_file.size > MAX_FILE_SIZE:
        raise ValueError(f"File too large: {uploaded_file.size} > {MAX_FILE_SIZE}")

    # Check file extension
    file_ext = Path(uploaded_file.name).suffix.lower()
    if file_ext not in ALLOWED_EXTENSIONS:
        raise ValueError(f"File type not allowed: {file_ext}")

    # Generate safe filename
    file_hash = hashlib.sha256(uploaded_file.name.encode()).hexdigest()[:8]
    safe_name = f"upload_{file_hash}{file_ext}"

    # Read with pandas (has built-in security)
    if file_ext == '.csv':
        # Prevent CSV injection
        df = pd.read_csv(uploaded_file,
                        escapechar='\\',
                        encoding='utf-8',
                        on_bad_lines='skip')

        # Sanitize column names
        df.columns = [col.strip()[:50] for col in df.columns]

        return df
```

## üõ°Ô∏è Dependency Security

### Requirements Management

```python
# requirements.txt - Pin versions for security
streamlit==1.28.0  # Pin to tested version
pandas==2.0.3      # Avoid dependency confusion
numpy==1.24.3      # Prevent supply chain attacks

# Use safety to check vulnerabilities
# pip install safety
# safety check --json
```

### Import Security

```python
# Secure imports with validation
import sys
import importlib.util

def secure_import(module_name: str):
    """Securely import modules with validation."""
    # Whitelist allowed modules
    ALLOWED_MODULES = {
        'streamlit',
        'pandas',
        'numpy',
        'streamlit_lightweight_charts_pro'
    }

    if module_name not in ALLOWED_MODULES:
        raise ImportError(f"Module not allowed: {module_name}")

    # Check module source
    spec = importlib.util.find_spec(module_name)
    if spec is None:
        raise ImportError(f"Module not found: {module_name}")

    # Verify module location (prevent path traversal)
    if '..' in str(spec.origin):
        raise ImportError(f"Suspicious module path: {spec.origin}")

    return importlib.import_module(module_name)
```

## üîê Data Protection

### Sensitive Data Handling

```python
import secrets
from cryptography.fernet import Fernet

class DataProtection:
    """Protect sensitive chart data."""

    @staticmethod
    def mask_sensitive_values(df: pd.DataFrame,
                            sensitive_cols: List[str]) -> pd.DataFrame:
        """Mask sensitive columns in DataFrame."""
        df_copy = df.copy()

        for col in sensitive_cols:
            if col in df_copy.columns:
                # Keep first and last char, mask middle
                df_copy[col] = df_copy[col].apply(
                    lambda x: x[0] + '*' * (len(str(x)) - 2) + x[-1]
                    if len(str(x)) > 2 else '***'
                )

        return df_copy

    @staticmethod
    def generate_secure_key() -> str:
        """Generate cryptographically secure key."""
        return secrets.token_urlsafe(32)

    @staticmethod
    def encrypt_data(data: str, key: bytes) -> bytes:
        """Encrypt sensitive data."""
        f = Fernet(key)
        return f.encrypt(data.encode())
```

### Session Security

```python
import streamlit as st
from datetime import datetime, timedelta

class SessionSecurity:
    """Manage secure sessions."""

    @staticmethod
    def init_secure_session():
        """Initialize secure session state."""
        if 'session_id' not in st.session_state:
            st.session_state.session_id = secrets.token_hex(16)
            st.session_state.session_start = datetime.now()
            st.session_state.last_activity = datetime.now()

    @staticmethod
    def check_session_timeout(timeout_minutes: int = 30):
        """Check and enforce session timeout."""
        if 'last_activity' in st.session_state:
            idle_time = datetime.now() - st.session_state.last_activity

            if idle_time > timedelta(minutes=timeout_minutes):
                # Clear session
                for key in list(st.session_state.keys()):
                    del st.session_state[key]
                st.warning("Session expired. Please refresh the page.")
                st.stop()

        # Update activity
        st.session_state.last_activity = datetime.now()
```

## üö® Security Headers & CSP

### Frontend Security

```typescript
// Content Security Policy for frontend
// streamlit_lightweight_charts_pro/frontend/src/security.ts

export const securityHeaders = {
    'Content-Security-Policy': [
        "default-src 'self'",
        "script-src 'self' 'unsafe-inline' https://unpkg.com",  // For lightweight-charts
        "style-src 'self' 'unsafe-inline'",
        "img-src 'self' data: https:",
        "connect-src 'self' wss: https:",
        "frame-ancestors 'none'",
        "base-uri 'self'",
        "form-action 'self'"
    ].join('; '),
    'X-Content-Type-Options': 'nosniff',
    'X-Frame-Options': 'DENY',
    'X-XSS-Protection': '1; mode=block',
    'Referrer-Policy': 'strict-origin-when-cross-origin'
}
```

## üîç Security Scanning

### Pre-commit Security Checks

```yaml
# .pre-commit-config.yaml additions
- repo: https://github.com/PyCQA/bandit
  rev: 1.7.5
  hooks:
    - id: bandit
      args: ['-r', 'streamlit_lightweight_charts_pro/', '-ll']
      exclude: ^tests/

- repo: https://github.com/Lucas-C/pre-commit-hooks-safety
  rev: v1.3.2
  hooks:
    - id: python-safety-dependencies-check
```

### Security Testing

```python
# tests/security/test_input_validation.py
import pytest
from streamlit_lightweight_charts_pro.security import SecurityValidator

class TestSecurityValidation:
    """Test security validation."""

    @pytest.mark.parametrize("malicious_input,expected_error", [
        ("<script>alert('XSS')</script>", ValueError),
        ("'; DROP TABLE charts; --", ValueError),
        ("../../../etc/passwd", ValueError),
        ("a" * 1000, ValueError),  # Length attack
    ])
    def test_input_sanitization(self, malicious_input, expected_error):
        """Test that malicious inputs are rejected."""
        with pytest.raises(expected_error):
            SecurityValidator.validate_chart_key(malicious_input)
```

## üìã Security Checklist

- [ ] Input validation on all user inputs
- [ ] Output encoding to prevent XSS
- [ ] SQL injection prevention (use parameterized queries)
- [ ] Path traversal prevention
- [ ] File upload restrictions
- [ ] Session management and timeout
- [ ] Dependency vulnerability scanning
- [ ] Regular security updates
- [ ] Error messages don't leak sensitive info
- [ ] Logging doesn't contain sensitive data
- [ ] HTTPS only in production
- [ ] CSP headers configured
