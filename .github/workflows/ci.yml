name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"

    - name: Run linting
      run: |
        # Run Ruff for linting and formatting
        ruff check .
        ruff format --check .

    - name: Run type checking
      run: |
        # Run MyPy for type checking
        mypy streamlit_lightweight_charts_pro --ignore-missing-imports

    - name: Run security checks
      run: |
        # Run Bandit for security issues
        bandit -r streamlit_lightweight_charts_pro/ -f json -o bandit-report.json || true

    - name: Run unit tests
      run: |
        # Run pytest with coverage
        pytest tests/ -v --cov=streamlit_lightweight_charts_pro --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  documentation:
    name: Documentation Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mkdocs mkdocs-material mkdocstrings mkdocstrings-python

    - name: Build documentation
      run: |
        mkdocs build

    - name: Check documentation links
      run: |
        # Check for broken internal links
        python -c "
        import os
        import re
        from pathlib import Path

        docs_dir = Path('docs')
        broken_links = []

        for html_file in docs_dir.rglob('*.html'):
            content = html_file.read_text(encoding='utf-8')
            # Find internal links (not external or anchors)
            links = re.findall(r'href=\"([^\"]*\.html?)\"', content)

            for link in links:
                if link.startswith('http'):
                    continue
                target_path = docs_dir / link
                if not target_path.exists():
                    broken_links.append(f'{html_file}: {link}')

        if broken_links:
            print('Broken links found:')
            for link in broken_links:
                print(f'  {link}')
            exit(1)
        else:
            print('All documentation links are valid!')
        "

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/

  frontend:
    name: Frontend Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: streamlit_lightweight_charts_pro/frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: streamlit_lightweight_charts_pro/frontend
      run: npm ci

    - name: Run frontend linting
      working-directory: streamlit_lightweight_charts_pro/frontend
      run: |
        npm run lint
        npm run format:check

    - name: Run frontend type checking
      working-directory: streamlit_lightweight_charts_pro/frontend
      run: npm run type-check

    - name: Run frontend tests
      working-directory: streamlit_lightweight_charts_pro/frontend
      run: npm run test:unit

    - name: Build frontend
      working-directory: streamlit_lightweight_charts_pro/frontend
      run: npm run build

    - name: Upload frontend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: streamlit_lightweight_charts_pro/frontend/dist/

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  package:
    name: Package Build
    runs-on: ubuntu-latest
    needs: [test, documentation, frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package
        path: dist/

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [documentation]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download documentation artifacts
      uses: actions/download-artifact@v3
      with:
        name: documentation
        path: docs/

    - name: Setup Pages
      uses: actions/configure-pages@v3

    - name: Upload to Pages
      uses: actions/upload-pages-artifact@v2
      with:
        path: docs/

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2
